{"version":3,"sources":["quil/middlewares/navigation_3d.cljc"],"mappings":"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","names":["quil.middlewares.navigation-3d/missing-navigation-key-error","quil.middlewares.navigation-3d/assert-state-has-navigation","state","js/Error","quil.middlewares.navigation-3d/default-position","quil.core/width","quil.core/height","quil.core/tan","quil.core/PI","quil.middlewares.navigation-3d/rotate-by-axis-and-angle","v","axis","angle","vec__45987","cljs.core.nth","vec__45990","a-x","a-y","a-z","x","y","z","cs","quil.core/cos","-cs","sn","quil.core/sin","a","b","c","d","e","f","g","h","i","quil.middlewares.navigation-3d/rotate-lr","nav-3d","cljs.core.update_in","p__45995","p__45996","vec__45997","vec__46000","quil.middlewares.navigation-3d/cross-product","u1","u2","u3","v1","v2","v3","quil.middlewares.navigation-3d/v-mult","mult","p1__46005#","cljs.core.mapv","quil.middlewares.navigation-3d/v-plus","cljs.core/+","quil.middlewares.navigation-3d/v-opposite","quil.middlewares.navigation-3d/v-normalize","norm","cljs.core.map","quil.core/sq","cljs.core.apply","quil.core/sqrt","quil.middlewares.navigation-3d/rotate-ud","p1__46006#","rotate","quil.middlewares.navigation-3d/rotate","event","pixels-in-360","cljs.core._EQ_","dx","dy","angle-lr","quil.core/map-range","quil.core/TWO-PI","angle-ud","p1__46007#","quil.middlewares.navigation-3d/space","cljs.core.keyword","quil.middlewares.navigation-3d/move","step-size","map__46009","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","up","straight","temp__5741__auto__","dir","pred__46011","expr__46012","cljs.core/=","p1__46008#","quil.middlewares.navigation-3d/setup-3d-nav","user-setup","user-settings","initial-state","cljs.core/select-keys","cljs.core.merge","p1__46016#","quil.middlewares.navigation-3d/navigation-3d","options","rotate-on","draw","key-pressed","_","rotate-on-fn","G__46024","G__46025","setup","cljs.core.assoc","cljs.core.partial","map__46032","vec__46033","vec__46036","vec__46039","c-x","c-y","c-z","u-x","u-y","u-z","p-x","p-y","p-z","quil.core.camera","G__46045","G__46046","G__46048","G__46049"],"sourcesContent":["(ns quil.middlewares.navigation-3d\n  (:require [quil.core :as q]))\n\n(def ^:private ^String missing-navigation-key-error\n  (str \"state map is missing :navigation-3d key. \"\n       \"Did you accidentally removed it from the state in \"\n       \":update or any other handler?\"))\n\n(defn- assert-state-has-navigation\n  \"Asserts that `state` map contains `:navigation-2d` object.\"\n  [state]\n  (when-not (:navigation-3d state)\n    (throw #?(:clj (RuntimeException. missing-navigation-key-error)\n              :cljs (js/Error. missing-navigation-key-error)))))\n\n(defn- default-position\n  \"Default position configuration. Check default configuration in\n  'camera' function.\"\n  []\n  {:position [(/ (q/width) 2.0)\n              (/ (q/height) 2.0)\n              (/ (q/height) 2.0 (q/tan (/ (* q/PI 60.0) 360.0)))]\n   :straight [0 0 -1]\n   :up [0 1 0]})\n\n(defn- rotate-by-axis-and-angle\n  \"Rotates vector `v` by `angle` with `axis`.\n  Formula is taken from wiki:\n  http://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\"\n  [v axis angle]\n  (let [[a-x a-y a-z] axis\n        [x y z] v\n        cs (q/cos angle)\n        -cs (- 1 cs)\n        sn (q/sin angle)\n        ; Matrix is\n        ; [a b c]\n        ; [d e f]\n        ; [g h i]\n        a (+ cs (* a-x a-x -cs))\n        b (- (* a-x a-y -cs)\n             (* a-z sn))\n        c (+ (* a-x a-z -cs)\n             (* a-y sn))\n        d (+ (* a-x a-y -cs)\n             (* a-z sn))\n        e (+ cs (* a-y a-y -cs))\n        f (- (* a-y a-z -cs)\n             (* a-x sn))\n        g (- (* a-x a-z -cs)\n             (* a-y sn))\n        h (+ (* a-y a-z -cs)\n             (* a-x sn))\n        i (+ cs (* a-z a-z -cs))]\n    [(+ (* a x) (* b y) (* c z))\n     (+ (* d x) (* e y) (* f z))\n     (+ (* g x) (* h y) (* i z))]))\n\n(defn- rotate-lr\n  \"Rotates `nav-3d` configuration left-right. `angle` positive - rotate right,\n  negative - left.\"\n  [nav-3d angle]\n  (update-in nav-3d [:straight] rotate-by-axis-and-angle (:up nav-3d) angle))\n\n(defn- cross-product\n  \"Vector cross-product: http://en.wikipedia.org/wiki/Cross_product\"\n  [[u1 u2 u3] [v1 v2 v3]]\n  [(- (* u2 v3) (* u3 v2))\n   (- (* u3 v1) (* u1 v3))\n   (- (* u1 v2) (* u2 v1))])\n\n(defn- v-mult\n  \"Multiply vector `v` by scalar `mult`.\"\n  [v mult]\n  (mapv #(* % mult) v))\n\n(defn- v-plus\n  \"Sum of 2 vectors.\"\n  [v1 v2]\n  (mapv + v1 v2))\n\n(defn- v-opposite\n  \"Returns vector opposite to vector `v`.\"\n  [v]\n  (v-mult v -1))\n\n(defn- v-normalize\n  \"Normalize vector, returning vector\n  which has same direction but with norm equals to 1.\"\n  [v]\n  (let [norm (->> (map q/sq v)\n                  (apply +)\n                  (q/sqrt))]\n    (v-mult v (/ norm))))\n\n(defn- rotate-ud\n  \"Rotates `nav-3d` configuration up-down.\"\n  [nav-3d angle]\n  (let [axis (cross-product (:straight nav-3d) (:up nav-3d))\n        rotate #(rotate-by-axis-and-angle % axis angle)]\n    (-> nav-3d\n        (update-in [:straight] rotate)\n        (update-in [:up] rotate))))\n\n(defn- rotate\n  \"Mouse handler function which rotates nav-3d configuration.\n  It uses mouse from `event` object and `pixels-in-360` to calculate\n  angles to rotate.\"\n  [state event pixels-in-360]\n  (assert-state-has-navigation state)\n  (if (= 0 (:p-x event) (:p-y event))\n    state\n    (let [dx (- (:p-x event) (:x event))\n          dy (- (:y event) (:p-y event))\n          angle-lr (q/map-range dx 0 pixels-in-360 0 q/TWO-PI)\n          angle-ud (q/map-range dy 0 pixels-in-360 0 q/TWO-PI)]\n      (update-in state [:navigation-3d]\n                 #(-> %\n                      (rotate-lr angle-lr)\n                      (rotate-ud angle-ud))))))\n\n(def ^:private space (keyword \" \"))\n\n(defn- move\n  \"Keyboard handler function which moves nav-3d configuration.\n  It uses keyboard key from `event` object to determine in which\n  direction to move.\"\n  [state event step-size]\n  (assert-state-has-navigation state)\n  (let [{:keys [up straight]} (:navigation-3d state)]\n    (if-let [dir (condp = (:key event)\n                   :w straight\n                   :s (v-opposite straight)\n                   space (v-opposite up)\n                   :z up\n                   :d (cross-product straight up)\n                   :a (cross-product up straight)\n                   nil)]\n      (update-in state [:navigation-3d :position]\n                 #(v-plus % (v-mult dir step-size)))\n      state)))\n\n(defn- setup-3d-nav\n  \"Custom 'setup' function which creates initial position\n  configuration and puts it to the state map.\"\n  [user-setup user-settings]\n  (let [initial-state (-> user-settings\n                          (select-keys [:straight :up :position])\n                          (->> (merge (default-position)))\n                          (update-in [:straight] v-normalize)\n                          (update-in [:up] v-normalize))]\n    (update-in (user-setup) [:navigation-3d]\n               #(merge initial-state %))))\n\n(defn navigation-3d\n  \"Enables navigation in 3D space. Similar to how it is done in\n  shooters: WASD navigation, space is go up, z is go down,\n  drag mouse to look around.\"\n  [options]\n  (let [; 3d-navigation related user settings\n        user-settings (:navigation-3d options)\n        pixels-in-360 (:pixels-in-360 user-settings 1000)\n        step-size (:step-size user-settings 20)\n        rotate-on (:rotate-on user-settings :mouse-dragged)\n\n        ; user-provided handlers which will be overridden\n        ; by 3d-navigation\n        draw (:draw options (fn [state]))\n        key-pressed (:key-pressed options (fn [state _] state))\n        rotate-on-fn (rotate-on options (fn [state _] state))\n        setup (:setup options (fn [] {}))]\n    (assoc options\n\n           :setup (partial setup-3d-nav setup user-settings)\n\n           :draw (fn [state]\n                   (assert-state-has-navigation state)\n                   (let [{[c-x c-y c-z] :straight\n                          [u-x u-y u-z] :up\n                          [p-x p-y p-z] :position} (:navigation-3d state)]\n                     (q/camera p-x p-y p-z (+ p-x c-x) (+ p-y c-y) (+ p-z c-z) u-x u-y u-z))\n                   (draw state))\n\n           :key-pressed (fn [state event]\n                          (key-pressed (move state event step-size) event))\n\n           rotate-on (fn [state event]\n                       (rotate-on-fn (rotate state event pixels-in-360) event)))))\n"]}