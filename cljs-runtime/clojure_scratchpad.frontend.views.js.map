{"version":3,"sources":["clojure_scratchpad/frontend/views.cljs"],"mappings":"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","names":["clojure-scratchpad.frontend.views/remove-vals","f","m","cljs.core/reduce-kv","k","v","cljs.core.assoc","cljs.core/empty","clojure-scratchpad.frontend.views/find-prev","xs","pred","cljs.core/last","p1__67288#","cljs.core.take_while","cljs.core/not","clojure-scratchpad.frontend.views/find-next","cljs.core/fnext","p1__67289#","cljs.core.drop_while","clojure-scratchpad.frontend.views/drop-tail","acc","x","cljs.core/first","cljs.core.conj","cljs.core/next","clojure-scratchpad.frontend.views/trim-head","n","cljs.core/vec","cljs.core.drop","cljs.core/count","clojure-scratchpad.frontend.views/index","cljs.core.map","cljs.core/vector","cljs.core.range","clojure-scratchpad.frontend.views/e-by-av","db","a","datascript.core.datoms","clojure-scratchpad.frontend.views/date->month","date","clojure-scratchpad.frontend.views/format-month","month","year","cljs.core.get","clojure-scratchpad.frontend.views/month-start","js/Date","clojure-scratchpad.frontend.views/month-end","vec__67290","cljs.core.nth","p__67293","map__67294","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","clojure-scratchpad.frontend.views/draw","circles","p-circles","quil.core.background","seq__67296","cljs.core/seq","chunk__67297","count__67298","i__67299","map__67316","vec__67317","vec__67320","temp__5743__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","map__67324","vec__67325","vec__67328","y","r","g","b","quil.core.fill","quil.core/ellipse","map__67332","vec__67333","vec__67336","p__67340","map__67341","clojure-scratchpad.frontend.views/click-handler","width","height","state","cljs.core.update","cljs.core/conj","quil.core/mouse-x","quil.core/mouse-y","cljs.core/mod","p__67343","map__67344","clojure-scratchpad.frontend.views/update-state","clojure-scratchpad.frontend.views/init","clojure-scratchpad.frontend.views/canvas","reagent.core/create-class","component","node","reagent.dom/dom-node","js/window","quil.core.sketch","quil.middleware/fun-mode","clojure-scratchpad.frontend.views/blank-finger-chart","js/clojure-scratchpad","js/clojure-scratchpad.frontend","js/clojure-scratchpad.frontend.views","js/clojure-scratchpad.frontend.views.todos-list","clojure-scratchpad.frontend.views/todos-list","reagent.core.atom","clojure-scratchpad.frontend.views/polar->cartesian","cx","cy","angle-in-degrees","angle-in-radians","Math/PI","Math/cos","Math/sin","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","clojure-scratchpad.frontend.views/draw-circle","seq67346","G__67347","G__67348","G__67349","self__4723__auto__","fill","or__4126__auto__","clojure-scratchpad.frontend.views/draw-nth-circle-around-circle-of-r-radius","c","satellite-count","\u00ba-of-seperation","coords","clojure-scratchpad.frontend.views/art-one","iter__4529__auto__","s__67351","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__67353","cljs.core/chunk-buffer","i__67352","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__67350","cljs.core/cons","cljs.core/rest","cljs.core.gensym","clojure_scratchpad.frontend.views.draw_circle","clojure-scratchpad.frontend.views/make-dropdown-navigation","label","dropdowns","is-hidden?","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/update","s__67358","b__67360","i__67359","vec__67361","iter__67357","vec__67364","href","clojure-scratchpad.frontend.views/navigation","reitit.frontend.easy.href","clojure-scratchpad.frontend.views/input","id","type","e","cljs.core/reset!","clojure-scratchpad.frontend.views/input-field","submit-handler","s__67368","b__67370","i__67369","iter__67367","todo","sym","js/document.getElementById","clojure-scratchpad.frontend.views/home-page","clojure-scratchpad.frontend.views/portfolio-page","clojure-scratchpad.frontend.views/about-page","clojure-scratchpad.frontend.views/item-page","match","map__67371","map__67372","path","query","clojure-scratchpad.frontend.views/set-button-to-spinner","el","js/document.querySelector","clojure-scratchpad.frontend.views/valid-api-key?","key","clojure-scratchpad.frontend.views/login-form","email","password","clojure-scratchpad.frontend.views/number->note-name","G__67375","clojure-scratchpad.frontend.views/note-fingering","clojure-scratchpad.frontend.views/make-fingering","pressed-buttons","svg","unpressed-buttons","cljs.core/clj->js","p1__67376#","p1__67377#","js/clojure-scratchpad.frontend.views.current-note","clojure-scratchpad.frontend.views/current-note","clojure-scratchpad.frontend.views/chromatic-scale","s__67379","b__67381","i__67380","iter__67378","note","clojure-scratchpad.frontend.views/flute","clojure-scratchpad.frontend.views/circle","with-let67382","reagent.ratom/with-let-values","temp__5747__auto__","reagent.ratom/*ratom-context*","c__44106__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init67383","res__44107__auto__","running?","js/window.location","clojure-scratchpad.frontend.views/tictactoe","s__67385","b__67387","i__67386","iter__67384","clojure-scratchpad.frontend.views/schema","js/clojure-scratchpad.frontend.views.conn","clojure-scratchpad.frontend.views/conn","datascript.core.create_conn","clojure-scratchpad.frontend.views/fixtures","datascript.core.transact_BANG_","clojure-scratchpad.frontend.views/extract-todo","text","clojure-scratchpad.frontend.dom/value","clojure-scratchpad.frontend.dom/q","clojure-scratchpad.frontend.dom/date-value","clojure-scratchpad.frontend.dom/array-value","clojure-scratchpad.frontend.views/clean-todo","clojure-scratchpad.frontend.dom/set-value!","clojure-scratchpad.frontend.views/add-view","_","clojure-scratchpad.frontend.views/add-todo","project","project-id","project-tx","and__4115__auto__","entity","cljs.core/nil?","cljs.core.concat","clojure-scratchpad.frontend.views/todos","s__67389","b__67391","i__67390","iter__67388","entry","G__67392","G__67393","datascript.core/q","js/console.log","group"],"sourcesContent":["(ns clojure-scratchpad.frontend.views\n  (:require\n   [\"react-leaflet\" :as react-leaflet]\n   [reagent.core :as r]\n   [reagent.dom :as rd]\n   [reitit.frontend :as rf]\n   [reitit.frontend.easy :as rfe]\n   [reitit.coercion.spec :as rss]\n   [spec-tools.data-spec :as ds]\n   [datascript.core :as d]\n   [datascript.transit :as dt]\n   [quil.core :as q]\n   [quil.middleware :as m]\n   [clojure-scratchpad.frontend.dom :as dom]))\n\n;; * DataScript Utils\n(defn remove-vals [f m]\n  (reduce-kv (fn [m k v] (if (f v) m (assoc m k v))) (empty m) m))\n\n(defn find-prev [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n(defn find-next [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n(defn drop-tail [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n(defn trim-head [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n(defn index [xs]\n  (map vector xs (range)))\n\n(defn e-by-av [db a v]\n  (-> (d/datoms db :avet a v) first :e))\n\n(defn date->month [date]\n  [(.getFullYear date)\n   (inc (.getMonth date))])\n\n(defn format-month [month year]\n  (str (get [\"January\"\n             \"February\"\n             \"March\"\n             \"April\"\n             \"May\"\n             \"June\"\n             \"July\"\n             \"August\"\n             \"September\"\n             \"October\"\n             \"November\"\n             \"December\"] (dec month))\n       \" \" year))\n\n(defn month-start [month year]\n  (js/Date. year (dec month) 1))\n\n(defn month-end [month year]\n  (let [[month year] (if (< month 12)\n                       [(inc month) year]\n                       [1 (inc year)])]\n    (-> (js/Date. year (dec month) 1)\n        .getTime\n        dec\n        js/Date.\n        )))\n\n\n;; * Quil / Processing\n(defn draw [{:keys [circles p-circles]}]\n  (q/background 255)\n  (doseq [{[x y] :pos [r g b] :color}  p-circles]\n    (q/fill r g b)\n    (q/ellipse x y x x))\n  (let [{[x y] :pos [r g b] :color} (last circles)]\n    (q/fill r g b)\n    (q/ellipse x y x x)))\n\n(defn click-handler [{:keys [width height] :as state}]\n  (update state :p-circles conj\n          {:pos   [(q/mouse-x)\n                   (q/mouse-y)]\n           :color [(mod (+ (q/mouse-x)\n                           (q/mouse-x)) 255)\n                   (mod (+ (q/mouse-x)\n                           (q/mouse-y)) 255)\n                   (mod (+ (q/mouse-y)\n                           (q/mouse-y)) 255)]}))\n\n(defn update-state [{:keys [width height] :as state}]\n  (update state :circles conj\n          {:pos   [(q/mouse-x)\n                   (q/mouse-y)]\n           :color [250 250 250]}))\n\n(defn init [width height]\n  (fn []\n    {:width   width\n     :height  height\n     :circles []\n     :p-circles []}))\n\n(defn canvas []\n  (r/create-class\n   {:component-did-mount\n    (fn [component]\n      (let [node (rd/dom-node component)\n            width (/ (.-innerWidth js/window) 2)\n            height (/ (.-innerHeight js/window) 2)]\n        (q/sketch\n         :host node\n         :draw draw\n         :setup (init width height)\n         :update update-state\n         :size [width height]\n         :middleware [m/fun-mode]\n         :mouse-clicked click-handler\n         )))\n    :render\n    (fn [] [:div])}))\n\n;; * Fingering Chart\n(def blank-finger-chart\n  [:svg {:height \"750px\"\n         :fill \"white\"\n         :stroke \"black\"\n         :id \"flute\"}\n   [:g\n     {:id \"layer1\"}\n     [:circle\n      {:id \"B\",\n       :cx \"94.829094\",\n       :cy \"40.962307\",\n       :r \"10.883539\"}]\n     [:circle\n      {:id \"A\",\n       :cx \"94.477173\",\n       :cy \"73.504837\",\n       :r \"10.883539\"}]\n     [:circle\n      {:id \"G\",\n       :cx \"94.183945\",\n       :cy \"104.83595\",\n       :r \"10.883539\"}]\n     [:circle\n      {:id \"F\",\n       :cx \"94.893829\",\n       :cy \"153.36499\",\n       :r \"10.883539\"}]\n     [:circle\n      {:id \"E\",\n       :cx \"94.526833\",\n       :cy \"185.84406\",\n       :r \"10.883539\"}]\n     [:circle\n      {:id \"D\",\n       :cx \"93.813431\",\n       :cy \"217.48276\",\n       :r \"10.883539\"}]\n     [:path\n      {:d\n       \"m 95.542419,243.818 23.171811,-0.33015 c 0,0 4.54701,-1.14449 4.71627,-3.18596 0.16927,-2.04146 -1.20552,-9.49617 -3.83401,-10.00361 -2.6285,-0.50744 -4.71483,-2.33976 -10.9604,-1.51438 -6.24557,0.82538 -9.408875,8.33637 -9.408875,8.33637 0,0 -1.190483,1.13592 -1.666567,1.32352 -0.476088,0.1876 -4.660624,0.30379 -5.047949,0.85207 -0.38732,0.54827 -1.988802,0.46778 -1.534693,2.11862 0.454108,1.65083 4.564413,2.40352 4.564413,2.40352 z\",\n       :id \"pinky-a\"}]\n     [:path\n      {:d\n       \"m 110.69374,266.39496 -0.42821,-15.79194 c 0,0 2.3699,4.08972 0.006,0.005 -2.36391,-4.08435 -4.90212,-2.6099 -4.90212,-2.6099 0,0 -2.88077,0.33572 -3.08063,2.2494 -0.19985,1.91368 0.0309,14.75273 0.0309,14.75273 0,0 0.9252,3.16178 4.26278,3.2155 3.33757,0.0537 4.11125,-1.82116 4.11125,-1.82116 z\",\n       :id \"pinky-c\"}]\n     [:path\n      {:d\n       \"m 98.323555,265.92 -0.862999,-15.57301 c 0,0 -0.977296,-3.96104 -6.891851,-2.82796 -5.914543,1.13309 -6.210176,4.63709 -6.210176,4.63709 0,0 -2.037458,8.3203 4.96382,11.1794 7.001289,2.8591 9.001206,2.58448 9.001206,2.58448 z\",\n       :id \"pinky-b\"}]\n     [:path\n      {:d\n       \"m 64.551702,77.996348 c 3.2561,-6.75666 5.91151,-6.18036 8.50423,-6.0941 2.59272,0.0863 4.64517,5.41242 4.64517,5.41242 0,0 1.33907,10.10954 -4.17425,10.21103 0,0 -4.64027,1.00185 -2.97332,20.197512 1.66695,19.19565 -6.00183,-29.726862 -6.00183,-29.726862 z\",\n       :id \"thumb-b\"}]\n     [:ellipse\n      {:id \"thumb-a\",\n       :cx \"70.81485\",\n       :cy \"59.120426\",\n       :rx \"8.1963415\",\n       :ry \"8.1971407\"}]\n     [:path\n      {:d \"M 73.097548,135.7084 H 117.36266 Z\",\n       :id \"path1602\"}]\n     [:path\n      {:d\n       \"m 123.71524,266.02274 -0.4282,-15.79194 c 0,0 2.3699,4.08972 0.006,0.005 -2.36392,-4.08435 -4.90213,-2.6099 -4.90213,-2.6099 0,0 -2.88077,0.33572 -3.08063,2.2494 -0.19985,1.91368 0.0309,14.75273 0.0309,14.75273 0,0 0.9252,3.16178 4.26278,3.2155 3.33758,0.0537 4.11126,-1.82116 4.11126,-1.82116 z\",\n       :id \"pinky-d\"}]\n     [:path\n      {\n       :d \"m 111.37902,114.35801 c -0.0402,-1.42381 -0.12048,-4.27171 1.6146,-5.70586 1.73509,-1.43416 5.28518,-1.45429 7.13774,0.19738 1.85257,1.65167 2.00778,4.97473 1.28267,8.99776 -0.7251,4.02302 -2.33041,8.74587 -8.0406,10.2031 -5.71019,1.45723 -15.5252,-0.35108 -16.187711,-1.75249 -0.662511,-1.40141 7.827411,-2.39575 11.725081,-4.08045 3.89766,-1.68469 3.20308,-4.05996 2.85573,-5.24777 -0.34735,-1.18782 -0.34735,-1.18786 -0.38751,-2.61167 z\",\n       :id \"pinky-r\"}]]])\n\n;; * Circle Stuff\n(defonce todos-list (r/atom [\"Clean house\" \"Walk dog\" \"See friend\"]))\n\n(defn polar->cartesian [cx cy r angle-in-degrees]\n  (let [angle-in-radians (* angle-in-degrees (/ Math/PI 180.0))]\n    {:x (* (Math/cos angle-in-radians)\n           (+ cx r))\n     :y (* (Math/sin angle-in-radians)\n           (+ cy  r))}))\n\n(defn draw-circle [x y r & fill]\n  [:circle {:cx x :cy y  :r r\n            :fill (or fill \"white\")\n            :stroke \"black\"}])\n\n;;; https://stackoverflow.com/questions/28992878/svg-a-circle-of-circles\n(defn draw-nth-circle-around-circle-of-r-radius [n r c]\n  (let [satellite-count c\n        \u00ba-of-seperation (/ 360 satellite-count)\n        coords (polar->cartesian c c r (* n \u00ba-of-seperation))]\n    (draw-circle (:x coords) (:y coords) 10)))\n;; * Circle Art\n(defn art-one []\n  [:svg {:width \"100%\"\n         :height \"100%\"\n         :href \"art-one\"\n         :id \"art-one\"\n         #_#_:style #js {:display \"none\"}}\n   (for [x (range 20)]\n     [:g {:key (gensym)}\n      (draw-circle (* x x x)\n                   (* x x x)\n                   (* x x x)\n                   \"#d1d1d1\")\n      (draw-circle (* x x x)\n                     (* x x)\n                     (* x x)\n                     \"#b1b1b1\") \n      (draw-circle (* x x x)\n                   (* 2 x)\n                   (* 3 x)\n                   \"#717171\")])])\n;; * Leaflet Stuff\n#_(defn map-container []\n  (let [center (atom [27.77 -82.63])\n        [lat lng] @center]\n    #_(fn [])\n    [:div \n     [:input.input\n      {:type :number\n       :default-value lat}]\n     [:input.input\n      {:type :number\n       :default-value lng}]\n     [:> react-leaflet/MapContainer\n      {:center [lat lng]\n       :zoom 13\n       :scrollWheelZoom false\n       :on-change #(js/console.log %)\n       :on-click #(js/console.log %)}\n      [:> react-leaflet/TileLayer\n       {:on-change #(js/console.log %)\n        :on-click #(js/console.log)\n        :attribution \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n        :url \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}]]]))\n;; * Navigation Stuff\n(defn make-dropdown-navigation [label dropdowns]\n  (let [state (r/atom {:navbar-hidden true})]\n    (fn []\n      (let [is-hidden? (get @state :navbar-hidden)]\n        [:nav.navbar {:role \"navigation\"\n                      :aria-label \"dropdown navigation\"}\n         [:div.navbar-item.has-dropdown.is-hoverable\n          [:a.navbar-link\n           {:on-click #(swap! state update :navbar-hidden not)}\n           label]\n          [:div.navbar-dropdown (if is-hidden?\n                                  {:class \"is-hidden\"})\n           (for [[label href] dropdowns]\n             [:a.navbar-item {:href href\n                              :key (gensym label)}\n              label])\n           #_#_[:a.navbar-item \"B\"]\n           [:a.navbar-item \"C\"]]]]))))\n\n(defn navigation []\n  (make-dropdown-navigation\n     \"mksybr\"\n     [[\"home\"\n       (rfe/href :router/frontpage)]\n      [\"about\"\n       (rfe/href :router/about)]\n      [\"portfolio\"\n       (rfe/href :router/portfolio)]\n      [\"login\"\n       (rfe/href :router/login)]\n      [\"flute\"\n       (rfe/href :router/flute)]\n      [\"circle\"\n       (rfe/href :router/circle)]\n      [\"todos\"\n       (rfe/href :router/todos)]\n      [\"tictactoe\"\n       (rfe/href :router/tictactoe)]]))\n\n;; * Inputs and Forms\n(defn input\n  [label id type state]\n  [:div.field\n   [:div.control\n    [:label.label label]\n    [:input.input\n     {:type type\n      :id id\n      :value @state\n      :on-change (fn [e] (reset! state (.. e -target -value)))}]]])\n\n(defn input-field [label]\n  (let [state (r/atom \"\")\n        submit-handler\n        (fn [e]\n          (e.preventDefault)\n          (swap! todos-list conj @state)\n          (reset! state \"\"))]\n    (fn []\n      [:div\n       (for [todo @todos-list]\n         (let [sym (gensym todo)]\n           [:div.card {:key sym\n                       :id sym}\n            [:div.card-content\n             todo\n             [:span.delete\n              {:on-click\n               (fn [e]\n                 (.toggle\n                  (.-classList\n                   (js/document.getElementById sym))\n                  \"is-complete\"))}]]]))\n       [:form.field.control\n        {:on-submit\n         submit-handler}\n        [:label.label label]\n        [:input.input\n         {:value @state\n          :type :text\n          :on-change\n          (fn [e]\n            (reset! state (.. e -target -value)))}]\n        [:button.button.is-primary.submit\n         {:on-click\n          submit-handler}]]])))\n;; * Pages\n(defn home-page []\n  [:div\n   [:h1.title \"Welcome\"]\n   [:p.subtitle (str  \"Hello \" )]])\n\n(defn portfolio-page []\n  [:div\n   [:div.card.is-half\n    [:div.card-content\n     [:p.subtitle \"Twains uWu \ud83e\udd2a\ud83e\udd2a\"]\n     [:div.media-content\n      [:div.media-left\n       [:figure.image.is-48x48\n        [:img\n         {:src\n          \"https://mksybr.com/portfolio/twains-demo.2.png\"}]]]]]]])\n\n(defn about-page []\n  [:div\n   [:h2.title \"About This App\"]\n   [:p \"This is a collection of hacks and demonstrations, learning projects, scratchpads, and experiments of a generative, or exploratory purpose. \"]])\n\n(defn item-page [match]\n  (let [{:keys [path query]} (:parameters match)\n        {:keys [id]} path]\n    [:div\n     [:h2 \"Selected item \" id]\n     (if (:foo query)\n       [:p \"Optional foo query param: \" (:foo query)])]))\n;; * UI Helpers\n(defn set-button-to-spinner [el]\n  (.add (.-classList (js/document.querySelector el)) \"is-loading\"))\n\n(defn valid-api-key? [key]\n  (not (nil? key)))\n\n(defn login-form\n  ([]\n   (let [email (r/atom \"\")\n         password (r/atom \"\")\n         submit-handler\n         (fn [e]\n           (e.preventDefault)\n           (set-button-to-spinner \"div > form > input.button\")\n           #_(login-handler email password))]\n     [:div\n      [:form\n       {:on-submit submit-handler}\n       [input \"email:\" \"email\" :text email]\n       [input \"password:\" \"password\" :password password]\n       [:input.button {:type :submit\n                       :on-submit submit-handler}]]])))\n;; * Flute and Music Stuff\n(defn number->note-name [n]\n  (let [n (mod n 12)]\n    (case n\n      0 :C\n      1 :CsDb\n      2 :D\n      3 :DsEb\n      4 :E\n      5 :F\n      6 :FsGb\n      7 :G\n      8 :GsAb\n      9 :A\n      10 :AsBb\n      11 :B\n      n)))\n\n\n(def note-fingering\n  {:C [\"#B\" \"#pinky-a\"]\n   :CsDb [\"#pinky-a\"]\n   :D [\"#B\" \"#A\" \"#G\" \"#F\" \"#E\" \"#D\" \"#thumb-b\"]\n   :DsEb [\"#B\" \"#A\" \"#G\" \"#F\" \"#E\" \"#D\" \"#thumb-b\" \"#pinky-a\"]\n   :E [\"#B\" \"#A\" \"#G\" \"#F\" \"#E\" \"#thumb-b\"  \"#pinky-a\"]\n   :F [\"#B\" \"#A\" \"#G\" \"#F\" \"#thumb-b\"  \"#pinky-a\"]\n   :FsGb [\"#B\" \"#A\" \"#G\" \"#D\" \"#thumb-b\"  \"#pinky-a\"]\n   :G [\"#B\" \"#A\" \"#G\" \"#thumb-b\"  \"#pinky-a\"]\n   :GsAb  [\"#B\" \"#A\" \"#G\" \"#thumb-b\" \"#pinky-r\"  \"#pinky-a\"]\n   :A [\"#B\" \"#A\" \"#thumb-b\"  \"#pinky-a\"]\n   :AsBb [\"#B\" \"#thumb-a\"  \"#pinky-a\"]\n   :B [\"#B\" \"#thumb-b\"  \"#pinky-a\"]})\n\n(defn make-fingering [pressed-buttons]\n  (let [svg (js/document.querySelector \"#flute\")\n        unpressed-buttons (.querySelectorAll svg \"circle, path, ellipse\")\n        pressed-buttons (.querySelectorAll svg (clj->js pressed-buttons))]\n    (.forEach unpressed-buttons\n              #(.setAttribute % \"fill\" \"white\"))\n    (.forEach pressed-buttons\n              #(.setAttribute % \"fill\" \"black\"))))\n\n(defonce current-note (r/atom \"\u00ba\"))\n\n(defn chromatic-scale []\n  [:div\n   (for [note (range 0 12)]\n     [:li.button.is-inline\n      {:key (number->note-name note)\n       :id (number->note-name note)\n       :on-click (fn [e]\n                   (reset!\n                    current-note\n                    (number->note-name note))\n                   (make-fingering (get note-fingering (number->note-name note))))}\n      (str (number->note-name note))])])\n\n(defn flute\n  []\n  [:div\n   [chromatic-scale]\n   [:h1.title \"Flute Chart\"]\n   [:h1.subtitle.note-name @current-note]\n   blank-finger-chart])\n\n\n(defn circle []\n  (r/with-let [running? (r/atom false)]\n    [:div\n     [:h3.title \"circles\"]\n     [:div\n      [:button.button {:on-click\n                #(set! js/window.location (.toDataURL (js/document.querySelector \"canvas#defaultCanvas0\") \"image/jpeg\"))}\n       \"Save\"]\n      [:button.button.is-primary\n       {:on-click #(swap! running? not)}\n       (if @running? \"Cancel\" \"Start\")]\n      (when @running?\n        [canvas])]]))\n\n;; * TicTacToe\n(defn tictactoe\n  []\n  [:h1.title \"TicTacToe\"]\n  [:div\n   {:style\n    {:display \"grid\"\n     :grid-template-row \"1fr 1fr 1fr\"\n     :grid-template-columns \"1fr 1fr 1fr\"}}\n   (for [x (range 0 9)]\n     [:div \"_\"])])\n\n;; * Todos\n(def schema {:todo/tags    {:db/cardinality :db.cardinality/many}\n             :todo/project {:db/valueType :db.type/ref}\n             :todo/done    {:db/index true}\n             :todo/due     {:db/index true}})\n\n(defonce conn (d/create-conn schema))\n\n(def fixtures [\n  #_[:db/add 0 :system/group :all]\n  {:db/id -1\n   :project/name \"datascript\"}\n  {:db/id -2\n   :project/name \"nyc-webinar\"}\n  {:db/id -3\n   :project/name \"shopping\"}\n  {:todo/text \"Displaying list of todos\"\n   :todo/tags [\"listen\" \"query\"]\n   :todo/project -2\n   :todo/done true\n   :todo/due  #inst \"2014-12-13\"}\n  {:todo/text \"Persisting to localStorage\"\n   :todo/tags [\"listen\" \"serialization\" \"transact\"]\n   :todo/project -2\n   :todo/done true\n   :todo/due  #inst \"2014-12-13\"}\n  {:todo/text \"Make task completable\"\n   :todo/tags [\"transact\" \"funs\"]\n   :todo/project -2\n   :todo/done false\n   :todo/due  #inst \"2014-12-13\"}\n  {:todo/text \"Fix fn calls on emtpy rels\"\n   :todo/tags [\"bug\" \"funs\" \"query\"]\n   :todo/project -1\n   :todo/done false\n   :todo/due  #inst \"2015-01-01\"}\n  {:todo/text \"Add db filtering\"\n   :todo/project -1\n   :todo/done false\n   :todo/due  #inst \"2015-05-30\"}\n  {:todo/text \"Soap\"\n   :todo/project -3\n   :todo/done false\n   :todo/due  #inst \"2015-05-01\"}\n  {:todo/text \"Cake\"\n   :todo/done false\n   :todo/project -3}\n  {:todo/text \"Just a task\" :todo/done false}\n  {:todo/text \"Another incomplete task\" :todo/done false}])\n\n(d/transact! conn fixtures)\n\n(defn extract-todo []\n  (when-let [text (dom/value (dom/q \".add-text\"))]\n    {:text    text\n     :project (dom/value (dom/q \".add-project\"))\n     :due     (dom/date-value  (dom/q \".add-due\"))\n     :tags    (dom/array-value (dom/q \".add-tags\"))}))\n\n(defn clean-todo []\n  (dom/set-value! (dom/q \".add-text\") nil)\n  (dom/set-value! (dom/q \".add-project\") nil)\n  (dom/set-value! (dom/q \".add-due\") nil)\n  (dom/set-value! (dom/q \".add-tags\") nil))\n\n(defn add-view []\n  [:form.add-view {:on-submit (fn [_] (add-todo) false)}\n   [:input.add-text    {:type \"text\" :placeholder \"New task\"}]\n   [:input.add-project {:type \"text\" :placeholder \"Project\"}]\n   [:input.add-tags    {:type \"text\" :placeholder \"Tags\"}]\n   [:input.add-due     {:type \"text\" :placeholder \"Due date\"}]\n   [:input.add-submit  {:type \"submit\" :value \"Add task\"}]])\n\n(defn add-todo []\n  (when-let [todo (extract-todo)]\n    ;; This is slightly complicated logic where we need to identify\n    ;; if a project with such name already exist. If yes, we need its\n    ;; id to reference from entity, if not, we need to create it first\n    ;; and then use its id to reference. We\u2019re doing both in a single\n    ;; transaction to avoid inconsistencies\n    (let [project    (:project todo)\n          project-id (when project (e-by-av @conn :project/name project))\n          project-tx (when (and project (nil? project-id))\n                       [[:db/add -1 :project/name project]])\n          entity (->> {:todo/text (:text todo)\n                       :todo/done false\n                       :todo/project (when project (or project-id -1)) \n                       :todo/due  (:due todo)\n                       :todo/tags (:tags todo)}\n                      (remove-vals nil?))]\n      (d/transact! conn (concat project-tx [entity])))\n    (clean-todo)))\n\n\n(defn todos []\n  [:div\n   [:h1.title \"Todo List\"]\n   (for [entry (d/q\n                '[:find ?text ?project\n                  :where\n                  [?e :todo/text ?text]\n                  [?e :todo/project ?pid]\n                  [?pid :project/name ?project]]\n                @conn)]\n     (do (js/console.log entry)\n         [:p (str entry)]))\n   (let [todo (r/atom \"\")\n         submit-handler \n         (fn [e]\n           (e.preventDefault)\n           (js/console.log\n            @todo)\n           (d/transact! conn [{:db/add -1 :todo/text @todo}])\n           (js/console.log @conn)\n           (reset! todo \"\"))]\n     [:form\n      {:on-submit submit-handler}\n      [input \"todo-name:\" \"todo-name\" :text todo]\n      [:button.button\n       \"New Task\"]])\n   (let [group (r/atom \"\")]\n     [:form\n      {:on-submit\n       (fn [e]\n         (e.preventDefault)\n         (js/console.log\n          @group)\n         (d/transact! conn [{:db/add -1 :project/name @group}])\n         (reset! group \"\"))}\n      [input \"group-name:\" \"group-name\" :text group]\n      [:button.button\n       \"New Group\"]])\n   ])\n"]}