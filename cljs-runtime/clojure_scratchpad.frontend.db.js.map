{"version":3,"sources":["clojure_scratchpad/frontend/db.cljs"],"mappings":";AAcA,AAAA,AAAMA,AAASC,AAAEC;AAAjB,AACE,AAACA,AAAAA,AAAAA;;AAEH,AAACC;AAED,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAKL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAK,AAACC,AAAcN;;AAE7B,AAAA;AAAA,AAEA,AAAA,AAAMO,AAAaC;AAAnB,AACE,AAACC,AAAOJ,AAAKG;;AACb,AAACE,AAAAA,AAAAA,AAAOF,AAAAA;;AACR,AAACG,AAAAA,AAAAA,AAAQH,AAAAA;;AAEX,AAAA,AAAMI,AAAaC,AAAEC;AAArB,AACE,AAACC,AAAU,AAAKD,AAAEE,AAAEC;AAAT,AAAY,AAAI,AAACJ,AAAAA,AAAAA,AAAEI,AAAAA;AAAGH;;AAAE,AAACI,AAAMJ,AAAEE,AAAEC;;AAAK,AAACE,AAAML,AAAGA;;AAE/D,AAAA,AAAMM,AAAWC,AAAGC;AAApB,AACE,AAACC,AAAK,AAAA,AAAAC,AAACC;AAAD,AAAa,AAACC,AAAI,AAAAF,AAAAA,AAACF,AAAAA,AAAAA;AAASD;;AAEpC,AAAA,AAAMM,AAAWN,AAAGC;AAApB,AACE,AAACM,AAAM,AAAA,AAAAC,AAACC;AAAD,AAAa,AAACJ,AAAI,AAAAG,AAAAA,AAACP,AAAAA,AAAAA;AAASD;;AAErC,AAAA,AAAMU,AAAWV,AAAGC;AAApB,AACE,AAAA,AAAOU;AACAX,AAAIA;;AADX,AAEE,AAAMY,AAAE,AAACC,AAAMb;AAAf,AACE,AACE,AAAA,AAAMY;AAAGD;;AADX,AAEE,AAACV,AAAAA,AAAAA,AAAKW,AAAAA;AAAG,AAACE,AAAKH,AAAIC;;AAFrB,AAGS,AAAO,AAACE,AAAKH,AAAIC;AAAG,AAACG,AAAKf;;;;;;;;;;AAEzC,AAAA,AAAMgB,AAAWhB,AAAGiB;AAApB,AACE,AAACC,AAAI,AAACC,AAAK,AAAG,AAACC,AAAMpB,AAAIiB,AAAGjB;;AAE9B,AAAA,AAAMqB,AAAOrB;AAAb,AACE,AAACsB,AAAIC,AAAOvB,AAAG,AAACwB;;AAElB,AAAA,AAAMC,AAAStC,AAAGuC,AAAE9B;AAApB,AACE,AAAA,AAAA,AAAI,AAAA,AAAC+B,AAASxC,AAASuC,AAAE9B,AAAGiB;;AAE9B,AAAA,AAAMe,AAAaC;AAAnB,AAAA,AACG,AAAcA,AACd,AAAA,AAAK,AAAWA;;AAEnB,AAAA,AAAMC,AAAcC,AAAMC;AAA1B,AACE,AAAA,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAWiB,AAAA,AAAKF,AACnBC;;AAEX,AAAA,AAAME,AAAaH,AAAMC;AAAzB,AACE,AAAAG,AAAA,AAAUH,AAAK,AAAA,AAAKD;;AAEtB,AAAA,AAAMK,AAAWL,AAAMC;AAAvB,AACE,AAAAK,AAAmB,AAAA,AAAA,AAAA,AAAI,AAAA,AAAGN,AACJ,AAAA,AAAKA,AAAOC,AACV,AAAA,AAAKA;AAF7B,AAAAM,AAAAD,AAAA,AAAA,AAAON;AAAP,AAAAO,AAAAD,AAAA,AAAA,AAAaL;AAAb,AAGE,AAAAG,AAAA,AAAA,AAAA,AAAI,AAAAA,AAAA,AAAUH,AAAK,AAAA,AAAKD;;AAM5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKQ;AA+CL,AAAA,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAAqBI;AAA3B,AACE,AAACC,AAAYnE,AACA,AAAAoE,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAN,AAAAI;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AAwzEoC,AAAA2I,AAAA/I;AAxzEpCK,AAAA,AAAAtC,AAAAqC;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAAI,AAAA,AAAAC,AAAAN,AAAAI;AAAA,AAAAvB,AAAAwB,AAAA,AAAA,AAAOU;AAAP,AAAAlC,AAAAwB,AAAA,AAAA,AAAYW;AAAZ,AAAA,AAAA,AAAAT,AAAAL,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIc,AACSD,AAAKC,AACWD;;AAH/B,AAAA,AAAAX,AAAA;;;;AAAA;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAP,AAAA,AAAAQ,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAP,AAAA;;;AAAA,AAAAU,AAAA,AAAAxD,AAAAwC;AAAA,AAAAf,AAAA+B,AAAA,AAAA,AAAOG;AAAP,AAAAlC,AAAA+B,AAAA,AAAA,AAAYI;AAAZ,AAAA,AAAAH,AAAA,AAAAH,AAAA,AAAAI,AAAAlB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIoB,AACSD,AAAKC,AACWD;;;AAH/B;;;;AAAA,AAAA;;AAAA,AAAA,AAAApB,AAAmB,AAAA,AAACsB,AAAYxB;;;;AAF/C,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA,AAAA,AAAAP,AAAMoC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAnC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAmC,AAAA,AAAA,AAAAlC;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAmC,AAAA,AAAAjC,AAAA,AAAAgC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE;;;;;AAAA,AAAA,AAAA,AAAMF,AACFzF,AAAGqF;AADP,AAEG,AAACvC,AAAI,AAAA,AAAA,AAACkD,AAAAA,AAAAA,AAAShG,AAAAA,AAAMqF;;;AAFxB,AAAA,AAAA,AAAA,AAAMI,AAGFzF,AAAGqF,AAAOY;AAHd,AAIG,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAAD,AAACE,AAAYpG;AAAM,AAAA,AAACqG,AAAQhB,AAAMY;;;AAJ5C;AAAA,AAAA,AAAA,AAAAL,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAnE,AAAAkE;AAAAA,AAAA,AAAAhE,AAAAgE;AAAAE,AAAA,AAAApE,AAAAkE;AAAAA,AAAA,AAAAhE,AAAAgE;AAAA,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAAA,AAAAF,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMH;;AAAN,AAQA,AAAA,AAAAhG,AAAAC,AAAAC,AAAA2G;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAACC;;AAClB,AAAA,AAAaC;AAMb,AAAA,AAAA,AAAKC;AASL,AAAA,AAAMC,AAAiB3G,AAAG4G;AAA1B,AACE,AAAAC,AAAA,AAAA;AAAAC,AAIE9G;AAJF+G,AAIKL;AAJLM,AAIiBJ;AAJjB,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AAMH,AAAA,AAAMC,AAAclH;AAApB,AACE,AAACmH,AACC,AAAA,AAACC,AAAU,AAAA,AAAChB,AAAYpG;;AAE5B,AAAA,AAAMqH,AAAarH;AAAnB,AACE,AAAAsH,AAAiB,AAACJ,AAAalH;AAA/B,AAAA,AAAAsH;AAAA,AAAAA,AAASV;AAAT,AACE,AAAKW,AAAU,AAACC,AAAI,AAACb,AAAgB3G,AAAG4G;AACnC9F,AAAU,AAAKd,AAAGyH;AAAR,AACE,AAAI,AAAA,AAACC,AAAY,AAACC,AAAU,AAAA,AAAIF,AAC5B,AAACG,AAAUL,AAAU,AAAA,AAAIE;;AAH9C,AAIE,AAACI,AAAS7H,AAAGc;;AACfd;;;AAIJ,AAAA,AAAAP,AAAAC,AAAAC,AAAAmI;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAvB,AAAA,AAAU+B;AAAVP,AAAA,AAAAxB,AAAA;AAAAyB,AAAA,AAAAzB,AAAA;AAAA0B,AAAA,AAAA1B,AAAA;AAAA2B,AAAA,AAAArF,AAAA,AAAA,AAAA,AAAAsF,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAyB,AAAKtI,AAAGwI,AAAMC;AAAd,AAAoBD;AAA7C,AAAAL,AAAAJ,AAAAC,AAAAC,AAAAC;;;AAMA,AAAAK,AAAA,AAAA,AAAkCvI,AAAG0I,AAAEA;AAAvC,AACE,AAAAC,AAAA,AAAA;AAAAC,AAME5I;AANF,AAAA,AAAA2I,AAAAC,AAAAD,AAAAC,AAAC3B,AAAAA,AAAAA;;AAQH,AAAAsB,AAAA,AAAA,AAAsCvI,AAAG0I,AAAEA;AAA3C,AACE,AAAAG,AAAA,AAAA;AAAAC,AAEE9I;AAFF,AAAA,AAAA6I,AAAAC,AAAAD,AAAAC,AAAC7B,AAAAA,AAAAA;;AAIH,AAAAsB,AAAA,AAAA,AAAgCvI,AAAG0I,AAAEA;AAArC,AACE,AAAAK,AAAA,AAAA;AAAAC,AAEEhJ;AAFF,AAAA,AAAA+I,AAAAC,AAAAD,AAAAC,AAAC/B,AAAAA,AAAAA;;AAIH,AAAAsB,AAAA,AAAA,AAAoCvI,AAAG0I,AAAEO;AAAzC,AACE,AAAAC,AAAA,AAAA;AAAAC,AAGKnJ;AAHLoJ,AAGQH;AAHR,AAAA,AAAAC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACnC,AAAAA,AAAAA;;AAOH,AAAAsB,AAAA,AAAA,AAAAc,AAAkCrJ,AAAG0I;AAArC,AAAA,AAAAY,AAAAD;AAAA,AAAAlG,AAAAmG,AAAA,AAAA,AAAwCzG;AAAxC,AAAAM,AAAAmG,AAAA,AAAA,AAA6C1G;AAA7C,AACE,AAAA2G,AAAA,AAAA;AAAAC,AAIKxJ;AAJLyJ,AAIQ,AAAC1G,AAAYH,AAAMC;AAJ3B6G,AAIiC,AAACzG,AAAUL,AAAMC;AAJlD,AAAA,AAAA0G,AAAAC,AAAAC,AAAAC,AAAAH,AAAAC,AAAAC,AAAAC,AAACzC,AAAAA,AAAAA;;AAYH,AAAA,AAAM0C,AAAgB3J,AAAG4J;AAAzB,AACE,AAAMC,AAAM,AAAA,AAAY,AAAC7D,AAAAA,AAAAA,AAAShG,AAAAA,AAAG4J,AAAAA;AAArC,AAAA,AAAA,AAAA,AAAA,AACYA,AAAe,AAAC1I,AAAI2I;;AAElC,AAAA,AAAMC,AAAaF;AAAnB,AACE,AAAA,AAAA,AAAA,AAAC5F,AAAYnE,AAAmB8J,AAAeC;;AAEjD,AAAA,AAAMG;AAAN,AACE,AAAA3F,AAAgB,AAAC6F,AAAU,AAAA,AAACC;AAA5B,AAAA,AAAA9F;AAAA,AAAA,AAAAA,AAAW4F;AAAX,AAAA,AAAA,AAAA,AAAA,AAAA,AACYA,AACA,AAACC,AAAU,AAAA,AAACC,AACZ,AAACC,AAAgB,AAAA,AAACD,AAClB,AAACE,AAAgB,AAAA,AAACF;;AAJ9B;;;AAMF,AAAA,AAAMG;AAAN,AACE,AAAA,AAACC,AAAe,AAAA,AAACJ;;AACjB,AAAA,AAACI,AAAe,AAAA,AAACJ;;AACjB,AAAA,AAACI,AAAe,AAAA,AAACJ;;AACjB,AAAA,AAACI,AAAe,AAAA,AAACJ;;AAEnB,AAAA,AAAMK;AAAN,AACE,AAAAnG,AAAgB,AAAC2F;AAAjB,AAAA,AAAA3F;AAAA,AAAA,AAAAA,AAAWoG;AAAX,AAME,AAAMC,AAAW,AAAA,AAAUD;AACrBE,AAAW,AAAA,AAAA,AAAMD,AAAQ,AAAA,AAAAE,AAAA,AAACrI,AAASzC,AAAmB4K;AACtDG,AAAW,AAAM,AAAAC,AAAKJ;AAAL,AAAA,AAAAI;AAAa,AAAA,AAAMH;;AAAnBG;;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC6BJ;AACxCK,AAAwB,AAAA,AAAON,AAEJ,AAAA,AAAMC,AAAQ,AAAAM,AAAIL,AAGjC,AAAA,AAAA,AAAA,AAAA,AAAA,AAACtK,AAAY4K;AAHgB,AAAA,AAAAD;AAAAA;;AAAA;;AAAd,AACH,AAAA,AAAMP,AACN,AAAA,AAAOA,AACnB,AAAA;AATlB,AAUE,AAACxG,AAAYnE,AAAK,AAAA,AAACwG,AAAOuE,AAAYE;;AACxC,AAACT;;AAjBH;;;AAqBF,AAAA,AAACY,AAAUpL,AACA,AAAKqL;AAAL,AACE,AAAAC,AAAQ,AAAA,AAAWD;AAAnB,AAAA,AAAAC,AAAAA,AAACjL,AAAAA,AAAAA;;AAGd,AAAA,AAAC+K,AAAUpL,AACA,AAAKqL;AAAL,AACE,AAAME,AAAO,AAAA,AAAA,AAAA,AAACC,AAAOH;AACfI,AAAO,AAAA,AAAUJ;AACjBK,AAAW,AAAKC;AAAL,AAAQ,AAAA,AAAA,AAAA,AAAA,AAAK,AAAA,AAAA,AAAI,AAAA,AAAQA,AACR,AAAA,AAAIA,AAAO,AAAA,AAAIA,AAAO,AAACC,AAAO,AAAA,AAAID;;AAHpE,AAIE,AAACE,AACA,AAAA,AAACC,AAAc,AAAA,AAACtF,AAAQ,AAAA,AAAA,AAAW+E,AAAY,AAACjJ,AAAIoJ,AAAWD;;AAM/E,AAAA,AAACL,AAAUpL,AACT,AAAKqL;AAAL,AACE,AAAAU,AAAmCV;AAAnCU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA9I,AAAA8I,AAAA,AAAcI;AAAd,AAAAlJ,AAAA8I,AAAA,AAAwBK;AAAxB,AACE,AAAM,AAAApB,AAAKmB;AAAL,AAAA,AAAAnB;AAAeoB;;AAAfpB;;;AAAN,AACE,AAACqB,AAAM3F,AAAQ,AAAK4F;AAAL,AACTA,AACF,AAAA,AAAAC,AAAC7K,AACD,AAACI,AACD,AAACE;AAFD,AAAY,AAAAuK,AAAcJ;AACpBC,AACKxF,AAAA;;;AALjB;;;AASN,AAAA,AAAM4F,AAAYrM;AAAlB,AACE,AAAA,AAACZ,AACC,AAACkN,AAAqBtM;;AAE1B,AAAA,AAAMuM,AAAYlN;AAAlB,AACE,AAAA,AAACD,AACC,AAACoN,AAAoBnN;;AAGzB,AAAA,AAAMc,AAASH;AAAf,AACE,AAAA,AAACyM,AAA6C,AAACJ,AAAWrM;;AAE5D,AAAA,AAACiL,AAAUpL,AACT,AAAKqL;AAAL,AAEE,AAAA9G,AAAc,AAAA,AAAW8G;AAAzB,AAAA,AAAA9G;AAAA,AAAA,AAAAA,AAAWpE;AAAX,AACE,AAAA,AAAC0M;AAAD,AAAgB,AAACvM,AAAQH;AAAzB;;AADF;;;AAIJ,AAAA,AAAM2M;AAAN,AACE,AAAA5B,AACC,AAAA3G,AAAkB,AAAA,AAACyI;AAAnB,AAAA,AAAAzI;AAAA,AAAA,AAAAA,AAAWwI;AAAX,AACE,AAAME,AAAU,AAACP,AAAWK;AAA5B,AACE,AAAM,AAACG,AAAE,AAAA,AAASD,AAAWtN;AAA7B,AACE,AAACO,AAAY+M;;AACb,AAAA,AAAAnC,AAACuB,AAAM3F,AAAQyG,AAAMnN;;AAFvB;;AAAA;;;AAFJ;;;AADD,AAAA,AAAAkL;AAAAA;;AAOC,AAAC/G,AAAYnE,AAAKuD","names":["clojure-scratchpad.frontend.db/profile","s","ex","cljs.core/enable-console-print!","clojure-scratchpad.frontend.db/schema","js/clojure-scratchpad","js/clojure-scratchpad.frontend","js/clojure-scratchpad.frontend.db","js/clojure-scratchpad.frontend.db.conn","clojure-scratchpad.frontend.db/conn","datascript.core.create_conn","clojure-scratchpad.frontend.db/reset-conn!","db","cljs.core/reset!","clojure-scratchpad.frontend.db/render","clojure-scratchpad.frontend.db/persist","clojure-scratchpad.frontend.db/remove-vals","f","m","cljs.core/reduce-kv","k","v","cljs.core.assoc","cljs.core/empty","clojure-scratchpad.frontend.db/find-prev","xs","pred","cljs.core/last","p1__50505#","cljs.core.take_while","cljs.core/not","clojure-scratchpad.frontend.db/find-next","cljs.core/fnext","p1__50506#","cljs.core.drop_while","clojure-scratchpad.frontend.db/drop-tail","acc","x","cljs.core/first","cljs.core.conj","cljs.core/next","clojure-scratchpad.frontend.db/trim-head","n","cljs.core/vec","cljs.core.drop","cljs.core/count","clojure-scratchpad.frontend.db/index","cljs.core.map","cljs.core/vector","cljs.core.range","clojure-scratchpad.frontend.db/e-by-av","a","datascript.core.datoms","clojure-scratchpad.frontend.db/date->month","date","clojure-scratchpad.frontend.db/format-month","month","year","cljs.core.get","clojure-scratchpad.frontend.db/month-start","js/Date","clojure-scratchpad.frontend.db/month-end","vec__50507","cljs.core.nth","clojure-scratchpad.frontend.db/fixtures","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","clojure-scratchpad.frontend.db/set-system-attrs!","seq50510","self__4724__auto__","cljs.core/seq","args","datascript.core.transact_BANG_","iter__4529__auto__","s__50512","cljs.core/LazySeq","temp__5743__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__50514","cljs.core/chunk-buffer","i__50513","vec__50515","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50511","cljs.core/chunk-rest","vec__50518","cljs.core/cons","cljs.core/rest","attr","value","cljs.core.partition","G__50526","clojure-scratchpad.frontend.db/system-attr","args-arr__4757__auto__","argseq__4758__auto__","seq50523","G__50524","G__50525","self__4723__auto__","datascript.core/entity","attrs","p1__50521#","cljs.core.mapv","clojure_scratchpad.frontend.db.system_attr","cljs.core.concat","js/clojure-scratchpad.frontend.db.history","clojure-scratchpad.frontend.db/history","cljs.core.atom","clojure-scratchpad.frontend.db/history-limit","clojure-scratchpad.frontend.db/filter-rule","clojure-scratchpad.frontend.db/todos-by-filter","terms","G__50527","G__50528","G__50529","G__50530","datascript.core/q","clojure-scratchpad.frontend.db/filter-terms","cljs.core/not-empty","clojure.string.split","clojure-scratchpad.frontend.db/filtered-db","temp__5741__auto__","whitelist","cljs.core/set","datom","cljs.core.not_EQ_","cljs.core/namespace","cljs.core/contains?","datascript.core/filter","js/clojure-scratchpad.frontend.db.todos-by-group","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__50531","cljs.core/MultiFn","cljs.core.symbol","clojure-scratchpad.frontend.db/todos-by-group","group","item","_","G__50532","G__50533","G__50534","G__50535","G__50536","G__50537","pid","G__50538","G__50539","G__50540","p__50541","vec__50542","G__50545","G__50546","G__50547","G__50548","clojure-scratchpad.frontend.db/toggle-todo-tx","eid","done?","clojure-scratchpad.frontend.db/toggle-todo","clojure-scratchpad.frontend.db/extract-todo","text","clojure-scratchpad.frontend.dom/value","clojure-scratchpad.frontend.dom/q","clojure-scratchpad.frontend.dom/date-value","clojure-scratchpad.frontend.dom/array-value","clojure-scratchpad.frontend.db/clean-todo","clojure-scratchpad.frontend.dom/set-value!","clojure-scratchpad.frontend.db/add-todo","todo","project","project-id","cljs.core/deref","project-tx","and__4115__auto__","entity","or__4126__auto__","cljs.core/nil?","datascript.core.listen_BANG_","tx-report","G__50549","tx-id","cljs.core.get_in","datoms","datom->str","d","cljs.core.pr_str","cljs.core.println","clojure.string.join","map__50551","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","db-before","db-after","cljs.core.swap_BANG_","h","p1__50550#","clojure-scratchpad.frontend.db/db->string","datascript.transit/write-transit-str","clojure-scratchpad.frontend.db/string->db","datascript.transit/read-transit-str","js/localStorage.setItem","js/setTimeout","clojure-scratchpad.frontend.db/seed-db","stored","js/localStorage.getItem","stored-db","cljs.core._EQ_","cljs.core/conj","cljs.core/chunk-first"],"sourcesContent":["(ns clojure-scratchpad.frontend.db\n  (:require\n   [clojure-scratchpad.frontend.dom :as dom]\n   [datascript.core :as d]\n   [datascript.transit :as dt]\n   [clojure.string :as str] ))\n\n#_(defmacro profile [k & body]\n  `(let [k# ~k]\n     (.time js/console k#)\n     (let [res# (do ~@body)]\n       (.timeEnd js/console k#)\n       res#)))\n\n(defn profile [s ex]\n  (ex))\n\n(enable-console-print!)\n\n(def schema {:todo/tags    {:db/cardinality :db.cardinality/many}\n             :todo/project {:db/valueType :db.type/ref}\n             :todo/done    {:db/index true}\n             :todo/due     {:db/index true}})\n\n(defonce conn (d/create-conn schema))\n\n(declare render persist)\n\n(defn reset-conn! [db]\n  (reset! conn db)\n  (render db)\n  (persist db))\n\n(defn remove-vals [f m]\n  (reduce-kv (fn [m k v] (if (f v) m (assoc m k v))) (empty m) m))\n\n(defn find-prev [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n(defn find-next [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n(defn drop-tail [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n(defn trim-head [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n(defn index [xs]\n  (map vector xs (range)))\n\n(defn e-by-av [db a v]\n  (-> (d/datoms db :avet a v) first :e))\n\n(defn date->month [date]\n  [(.getFullYear date)\n   (inc (.getMonth date))])\n\n(defn format-month [month year]\n  (str (get [\"January\"\n             \"February\"\n             \"March\"\n             \"April\"\n             \"May\"\n             \"June\"\n             \"July\"\n             \"August\"\n             \"September\"\n             \"October\"\n             \"November\"\n             \"December\"] (dec month))\n       \" \" year))\n\n(defn month-start [month year]\n  (js/Date. year (dec month) 1))\n\n(defn month-end [month year]\n  (let [[month year] (if (< month 12)\n                       [(inc month) year]\n                       [1 (inc year)])]\n    (-> (js/Date. year (dec month) 1)\n        .getTime\n        dec\n        js/Date.\n        )))\n\n(def fixtures [\n  [:db/add 0 :system/group :all]\n  {:db/id -1\n   :project/name \"datascript\"}\n  {:db/id -2\n   :project/name \"nyc-webinar\"}\n  {:db/id -3\n   :project/name \"shopping\"}\n               \n  {:todo/text \"Displaying list of todos\"\n   :todo/tags [\"listen\" \"query\"]\n   :todo/project -2\n   :todo/done true\n   :todo/due  #inst \"2014-12-13\"}\n  {:todo/text \"Persisting to localStorage\"\n   :todo/tags [\"listen\" \"serialization\" \"transact\"]\n   :todo/project -2\n   :todo/done true\n   :todo/due  #inst \"2014-12-13\"}\n  {:todo/text \"Make task completable\"\n   :todo/tags [\"transact\" \"funs\"]\n   :todo/project -2\n   :todo/done false\n   :todo/due  #inst \"2014-12-13\"}\n  {:todo/text \"Fix fn calls on emtpy rels\"\n   :todo/tags [\"bug\" \"funs\" \"query\"]\n   :todo/project -1\n   :todo/done false\n   :todo/due  #inst \"2015-01-01\"}\n  {:todo/text \"Add db filtering\"\n   :todo/project -1\n   :todo/done false\n   :todo/due  #inst \"2015-05-30\"}\n  {:todo/text \"Soap\"\n   :todo/project -3\n   :todo/done false\n   :todo/due  #inst \"2015-05-01\"}\n  {:todo/text \"Cake\"\n   :todo/done false\n   :todo/project -3}\n  {:todo/text \"Just a task\" :todo/done false}\n  {:todo/text \"Another incomplete task\" :todo/done false}])\n\n\n\n;; Entity with id=0 is used for storing auxilary view information\n;; like filter value and selected group\n(defn set-system-attrs! [& args]\n  (d/transact! conn \n               (for [[attr value] (partition 2 args)]\n                 (if value\n                   [:db/add 0 attr value]\n                   [:db.fn/retractAttribute 0 attr]))))\n\n(defn system-attr\n  ([db attr]\n   (get (d/entity db 0) attr))\n  ([db attr & attrs]\n   (mapv #(system-attr db %) (concat [attr] attrs))))\n\n;; History\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n;; * Todos\n;; Rules are used to implement OR semantic of a filter\n;; ?term must match either :project/name OR :todo/tags\n(def filter-rule\n '[[(match ?todo ?term)\n    [?todo :todo/project ?p]\n    [?p :project/name ?term]]\n   [(match ?todo ?term)\n    [?todo :todo/tags ?term]]])\n\n;; terms are passed as a collection to query,\n;; each term futher interpreted with OR semantic\n(defn todos-by-filter [db terms]\n  (d/q '[:find [?e ...]\n         :in $ % [?term ...]\n         :where [?e :todo/text]\n                (match ?e ?term)]\n    db filter-rule terms))\n\n(defn filter-terms [db]\n  (not-empty\n    (str/split (system-attr db :system/filter) #\"\\s+\")))\n\n(defn filtered-db [db]\n  (if-let [terms   (filter-terms db)]\n    (let[whitelist (set (todos-by-filter db terms))\n         pred      (fn [db datom]\n                     (or (not= \"todo\" (namespace (:a datom)))\n                         (contains? whitelist (:e datom))))]\n      (d/filter db pred))\n    db))\n\n;; Groups\n\n(defmulti todos-by-group (fn [db group item] group))\n\n;; Datalog has no negative semantic (NOT IN), we emulate it\n;; with get-else (get attribute with default value), and then\n;; filtering by that attribute, keeping only todos that resulted\n;; into default value\n(defmethod todos-by-group :inbox [db _ _]\n  (d/q '[:find [?todo ...]\n         :where [?todo :todo/text]\n                [(get-else $ ?todo :todo/project :none) ?project]\n                [(get-else $ ?todo :todo/due :none) ?due]\n                [(= ?project :none)]\n                [(= ?due :none)]]\n    db))\n\n(defmethod todos-by-group :completed [db _ _]\n  (d/q '[:find [?todo ...]\n         :where [?todo :todo/done true]]\n    db))\n\n(defmethod todos-by-group :all [db _ _]\n  (d/q '[:find  [?todo ...]\n         :where [?todo :todo/text]]\n    db))\n\n(defmethod todos-by-group :project [db _ pid]\n  (d/q '[:find [?todo ...]\n         :in   $ ?pid\n         :where [?todo :todo/project ?pid]]\n       db pid))\n\n;; Since todos do not store month directly, we pass in\n;; month boundaries and then filter todos with <= predicate\n(defmethod todos-by-group :month [db _ [year month]]\n  (d/q '[:find [?todo ...]\n         :in   $ ?from ?to\n         :where [?todo :todo/due ?due]\n         [(<= ?from ?due ?to)]]\n       db (month-start month year) (month-end month year)))\n\n\n\n;; This transaction function swaps the value of :todo/done attribute.\n;; Transaction funs are handy in situations when to decide what to do\n;; you need to analyse db first. They deliver atomicity and linearizeability\n;; to such calculations\n(defn toggle-todo-tx [db eid]\n  (let [done? (:todo/done (d/entity db eid))]\n    [[:db/add eid :todo/done (not done?)]]))\n\n(defn toggle-todo [eid]\n  (d/transact! conn [[:db.fn/call toggle-todo-tx eid]]))\n\n(defn extract-todo []\n  (when-let [text (dom/value (dom/q \".add-text\"))]\n    {:text    text\n     :project (dom/value (dom/q \".add-project\"))\n     :due     (dom/date-value  (dom/q \".add-due\"))\n     :tags    (dom/array-value (dom/q \".add-tags\"))}))\n\n(defn clean-todo []\n  (dom/set-value! (dom/q \".add-text\") nil)\n  (dom/set-value! (dom/q \".add-project\") nil)\n  (dom/set-value! (dom/q \".add-due\") nil)\n  (dom/set-value! (dom/q \".add-tags\") nil))\n\n(defn add-todo []\n  (when-let [todo (extract-todo)]\n    ;; This is slightly complicated logic where we need to identify\n    ;; if a project with such name already exist. If yes, we need its\n    ;; id to reference from entity, if not, we need to create it first\n    ;; and then use its id to reference. We\u2019re doing both in a single\n    ;; transaction to avoid inconsistencies\n    (let [project    (:project todo)\n          project-id (when project (e-by-av @conn :project/name project))\n          project-tx (when (and project (nil? project-id))\n                       [[:db/add -1 :project/name project]])\n          entity (->> {:todo/text (:text todo)\n                       :todo/done false\n                       :todo/project (when project (or project-id -1)) \n                       :todo/due  (:due todo)\n                       :todo/tags (:tags todo)}\n                      (remove-vals nil?))]\n      (d/transact! conn (concat project-tx [entity])))\n    (clean-todo)))\n\n\n;; re-render on every DB change\n(d/listen! conn :render\n           (fn [tx-report]\n             (render (:db-after tx-report))))\n\n;; logging of all transactions (prettified)\n(d/listen! conn :log\n           (fn [tx-report]\n             (let [tx-id  (get-in tx-report [:tempids :db/current-tx])\n                   datoms (:tx-data tx-report)\n                   datom->str (fn [d] (str (if (:added d) \"+\" \"\u2212\")\n                                           \"[\" (:e d) \" \" (:a d) \" \" (pr-str (:v d)) \"]\"))]\n               (println\n                (str/join \"\\n\" (concat [(str \"tx \" tx-id \":\")] (map datom->str datoms)))))))\n\n\n\n;; history\n\n(d/listen! conn :history\n  (fn [tx-report]\n    (let [{:keys [db-before db-after]} tx-report]\n      (when (and db-before db-after)\n        (swap! history (fn [h]\n          (-> h\n            (drop-tail #(identical? % db-before))\n            (conj db-after)\n            (trim-head history-limit))))))))\n\n;; transit serialization\n\n(defn db->string [db]\n  (profile \"db serialization\"\n    (dt/write-transit-str db)))\n\n(defn string->db [s]\n  (profile \"db deserialization\"\n    (dt/read-transit-str s)))\n\n;; persisting DB between page reloads\n(defn persist [db]\n  (js/localStorage.setItem \"datascript-todo/DB\" (db->string db)))\n\n(d/listen! conn :persistence\n  (fn [tx-report] ;; FIXME do not notify with nil as db-report\n                  ;; FIXME do not notify if tx-data is empty\n    (when-let [db (:db-after tx-report)]\n      (js/setTimeout #(persist db) 0))))\n\n;; restoring once persisted DB on page load\n(defn seed-db []\n  (or\n   (when-let [stored (js/localStorage.getItem \"datascript-todo/DB\")]\n     (let [stored-db (string->db stored)]\n       (when (= (:schema stored-db) schema) ;; check for code update\n         (reset-conn! stored-db)\n         (swap! history conj @conn)\n         true)))\n   (d/transact! conn fixtures)))\n\n#_(js/localStorage.clear)\n"]}