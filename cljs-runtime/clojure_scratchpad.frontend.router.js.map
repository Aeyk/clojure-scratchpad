{"version":3,"sources":["clojure_scratchpad/frontend/router.cljs"],"mappings":";AASA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAAA,AAACC;;AAEhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAGMC,AAIAC,AAIAC,AAIAC,AAIAC,AAIAC,AAKAC,AAIAC,AAIAC,AACkBC,AACH,AAAA,AAACC,AAAaC;AAExC,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEIC,AACAC,AAEA,AAAA,AAAAC,AAAKlB,AACH,AAAMmB,AAAK,AAAA,AAAO,AAAA,AAAA,AAAAD,AAAQlB;AAA1B,AAAA,AAAA,AAAAkB,AACGC,AAAMnB;AAFX;;AAIJ,AAAA,AAAMoB;AAAN,AACE,AAACC,AACA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAUpB,AAAyBqB,AACpC,AAAKC;AAAL,AAAQ,AAACC,AAAOzB,AAAMwB;AAFvB,AAAA,AAAA","names":["js/clojure-scratchpad","js/clojure-scratchpad.frontend","js/clojure-scratchpad.frontend.router","js/clojure-scratchpad.frontend.router.match","clojure-scratchpad.frontend.router/match","reagent.core.atom","clojure-scratchpad.frontend.router/routes","clojure-scratchpad.frontend.views/home-page","clojure-scratchpad.frontend.views/about-page","clojure-scratchpad.frontend.views/portfolio-page","clojure-scratchpad.frontend.views/login-form","clojure-scratchpad.frontend.views/flute","clojure-scratchpad.frontend.views/circle","clojure-scratchpad.frontend.views/todos","clojure-scratchpad.frontend.views/tictactoe","clojure-scratchpad.frontend.views/item-page","cljs.core/int?","spec-tools.data-spec/opt","cljs.core/keyword?","clojure-scratchpad.frontend.router/current-page","clojure-scratchpad.frontend.views/art-one","clojure-scratchpad.frontend.views/navigation","cljs.core/deref","view","clojure-scratchpad.frontend.router/init-router","reitit.frontend.easy/start!","reitit.frontend.router","reitit.coercion.spec/coercion","m","cljs.core/reset!"],"sourcesContent":["(ns clojure-scratchpad.frontend.router\n  (:require\n   [clojure-scratchpad.frontend.views :as views]\n   [reagent.core :as r]\n   [reitit.frontend :as rf]\n   [reitit.frontend.easy :as rfe]\n   [reitit.coercion.spec :as rss]\n   [spec-tools.data-spec :as ds]))\n\n(defonce match (r/atom nil))\n\n(def routes\n  [[\"/\"\n    {:name :router/frontpage\n     :view views/home-page}]\n\n   [\"/about\"\n    {:name :router/about\n     :view views/about-page}]\n\n   [\"/portfolio\"\n    {:name :router/portfolio\n     :view views/portfolio-page}]\n\n   [\"/login\"\n    {:name :router/login\n     :view views/login-form}]\n\n   [\"/flute\"\n    {:name :router/flute\n     :view views/flute}]\n\n   [\"/circle\"\n    {:name :router/circle\n     :view views/circle}]\n\n\n   [\"/todos\"\n    {:name :router/todos\n     :view views/todos}]\n\n   [\"/tictactoe\"\n    {:name :router/tictactoe\n     :view views/tictactoe}]\n\n   [\"/item/:id\"\n    {:name ::item\n     :view views/item-page\n     :parameters {:path {:id int?}\n                  :query {(ds/opt :foo) keyword?}}}]])\n\n(defn current-page []\n  [:div\n   [views/art-one]\n   [views/navigation]\n   [:div\n    (if @match\n      (let [view (:view (:data @match))]\n        [view @match]))]])\n\n(defn init-router []\n  (rfe/start!\n   (rf/router routes {:data {:coercion rss/coercion}})\n   (fn [m] (reset! match m))\n   ;; set to false to enable HistoryAPI\n   {:use-fragment true}))\n"]}